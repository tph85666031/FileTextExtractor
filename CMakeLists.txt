#CMAKE最小版本要求,可修改
#BUILD_TYPE=Release,Debug  UNIT_TEST=true,false
CMAKE_MINIMUM_REQUIRED(VERSION 2.9)

PROJECT("FileTextExtractor")

IF (MSVC)
  ADD_DEFINITIONS("-DWIN32_LEAN_AND_MEAN")
  ADD_DEFINITIONS("-DHAVE__SNPRINTF_S")
  ADD_DEFINITIONS("-DHAVE__VSNPRINTF_S")
  ADD_DEFINITIONS("-D_WIN32_WINNT=0x0501")
ENDIF()


IF ("${BUILD_TYPE}" STREQUAL "Debug")
  ADD_DEFINITIONS("-D__DEBUG__")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MDd)
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  ENDIF()
ELSE()
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MD)
  ENDIF()
ENDIF()

#-Woverloaded-virtual
#C/C++文件编译选项,无需修改
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=c99 -fwrapv")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

IF (UNIX OR APPLE)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -Wno-unused-result")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -Wno-unused-result")
ENDIF()

#头文件搜索路径,可修改
INCLUDE_DIRECTORIES(
	${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/format
	${PROJECT_SOURCE_DIR}/lib/include
)

#库文件搜索路径,可修改
LINK_DIRECTORIES(
	${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/lib
)

#依赖库,无需修改
IF (MSVC)
  ADD_COMPILE_OPTIONS( /W2 /wd4819 /wd4251 /wd4200 /wd4996)
  SET(PROJECT_LIB
      ${PROJECT_LIB}
	  com_static.lib
	  comex_static.lib
	  libssl.lib
	  libcrypto.lib
	  zlib.lib
	  msvcprt.lib
  )
ELSE()
  SET(PROJECT_LIB
      ${PROJECT_LIB}
	  libxlsreader.a
	  libcom.so
	  libcomex.so
	  dl
	  pthread
  )
ENDIF()

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

IF ("${UNIT_TEST}" STREQUAL "true")
  AUX_SOURCE_DIRECTORY(test PROJECT_SRC)
ENDIF()

#递归方式(允许存在子文件夹)
FILE(GLOB PROJECT_SRC ${PROJECT_SOURCE_DIR}/*.cpp ${PROJECT_SOURCE_DIR}/*.c ${PROJECT_SOURCE_DIR}/format/*.cpp ${PROJECT_SOURCE_DIR}/format/*.c)

SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH "$ORIGIN:$ORIGIN/../lib/:$ORIGIN/../../UCSCSDK/lib/")

#无需改动
IF (MSVC)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
ENDIF()


IF (UNIX OR APPLE)
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out)
ENDIF()
ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_SRC})
STRING(STRIP "${PROJECT_LIB}" PROJECT_LIB)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIB})
